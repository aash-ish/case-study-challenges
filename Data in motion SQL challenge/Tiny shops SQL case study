/*Overview
This case study uses PostgreSQL. To successfully answer all the questions you should have been exposed to the following areas of SQL:

Basic aggregations
CASE WHEN statements
Window Functions
Joins
Date time functions
CTEs*/

CREATE TABLE customers (
    customer_id integer PRIMARY KEY,
    first_name varchar(100),
    last_name varchar(100),
    email varchar(100)
);

CREATE TABLE products (
    product_id integer PRIMARY KEY,
    product_name varchar(100),
    price decimal
);

CREATE TABLE orders (
    order_id integer PRIMARY KEY,
    customer_id integer,
    order_date date
);

CREATE TABLE order_items (
    order_id integer,
    product_id integer,
    quantity integer
);

INSERT INTO customers (customer_id, first_name, last_name, email) VALUES
(1, 'John', 'Doe', 'johndoe@email.com'),
(2, 'Jane', 'Smith', 'janesmith@email.com'),
(3, 'Bob', 'Johnson', 'bobjohnson@email.com'),
(4, 'Alice', 'Brown', 'alicebrown@email.com'),
(5, 'Charlie', 'Davis', 'charliedavis@email.com'),
(6, 'Eva', 'Fisher', 'evafisher@email.com'),
(7, 'George', 'Harris', 'georgeharris@email.com'),
(8, 'Ivy', 'Jones', 'ivyjones@email.com'),
(9, 'Kevin', 'Miller', 'kevinmiller@email.com'),
(10, 'Lily', 'Nelson', 'lilynelson@email.com'),
(11, 'Oliver', 'Patterson', 'oliverpatterson@email.com'),
(12, 'Quinn', 'Roberts', 'quinnroberts@email.com'),
(13, 'Sophia', 'Thomas', 'sophiathomas@email.com');

INSERT INTO products (product_id, product_name, price) VALUES
(1, 'Product A', 10.00),
(2, 'Product B', 15.00),
(3, 'Product C', 20.00),
(4, 'Product D', 25.00),
(5, 'Product E', 30.00),
(6, 'Product F', 35.00),
(7, 'Product G', 40.00),
(8, 'Product H', 45.00),
(9, 'Product I', 50.00),
(10, 'Product J', 55.00),
(11, 'Product K', 60.00),
(12, 'Product L', 65.00),
(13, 'Product M', 70.00);

INSERT INTO orders (order_id, customer_id, order_date) VALUES
(1, 1, '2023-05-01'),
(2, 2, '2023-05-02'),
(3, 3, '2023-05-03'),
(4, 1, '2023-05-04'),
(5, 2, '2023-05-05'),
(6, 3, '2023-05-06'),
(7, 4, '2023-05-07'),
(8, 5, '2023-05-08'),
(9, 6, '2023-05-09'),
(10, 7, '2023-05-10'),
(11, 8, '2023-05-11'),
(12, 9, '2023-05-12'),
(13, 10, '2023-05-13'),
(14, 11, '2023-05-14'),
(15, 12, '2023-05-15'),
(16, 13, '2023-05-16');

INSERT INTO order_items (order_id, product_id, quantity) VALUES
(1, 1, 2),
(1, 2, 1),
(2, 2, 1),
(2, 3, 3),
(3, 1, 1),
(3, 3, 2),
(4, 2, 4),
(4, 3, 1),
(5, 1, 1),
(5, 3, 2),
(6, 2, 3),
(6, 1, 1),
(7, 4, 1),
(7, 5, 2),
(8, 6, 3),
(8, 7, 1),
(9, 8, 2),
(9, 9, 1),
(10, 10, 3),
(10, 11, 2),
(11, 12, 1),
(11, 13, 3),
(12, 4, 2),
(12, 5, 1),
(13, 6, 3),
(13, 7, 2),
(14, 8, 1),
(14, 9, 2),
(15, 10, 3),
(15, 11, 1),
(16, 12, 2),
(16, 13, 3);

select* from customers;

select* from orders;

select* from products;

select* from order_items;

--Q1. Which product has the highest price? Only return a single row.
select *
from products
order by price desc
limit 1

--Q2. Which customer has made the most orders?
select * from (select concat(customers.first_name ||' '|| customers.last_name) as "full name", count(order_id) as "number of orders",
dense_rank() over (order by count(order_id) desc) as "orders rank"
from customers
join orders on customers.customer_id=orders.customer_id
group by "full name") as "most orders"
where "most orders"."orders rank"=1

-- Q3. What’s the total revenue per product?
select product_name, sum(price*quantity) as "total revenue by product"
from products
left join order_items on order_items.product_id=products.product_id
group by product_name
order by "total revenue by product"

--Q4 Find the day with the highest revenue.
select order_date, sum(price*quantity) as "total revenue by date"
from orders
join order_items on order_items.order_id=orders.order_id
join products on products.product_id=order_items.product_id
group by order_date
order by "total revenue by date" desc
limit 1

-- Q5. Find the first order (by date) for each customer. ('left to be solved')
select * from (select concat(customers.first_name ||' '|| customers.last_name) as "full name", orders.order_id, order_date, product_name, 
rank() over(partition by concat(customers.first_name ||' '|| customers.last_name) order by order_date asc) as drank
from customers 
join orders on customers.customer_id=orders.customer_id
join order_items on order_items.order_id=orders.order_id
join products on products.product_id=order_items.product_id) firstoc
where firstoc.drank=1

--Q6. Find the top 3 customers who have ordered the most distinct products
select concat(customers.first_name ||' '|| customers.last_name) as "full name", count(distinct product_name) as "total unique products"
from customers 
join orders on customers.customer_id=orders.customer_id
join order_items on order_items.order_id=orders.order_id
join products on products.product_id=order_items.product_id
group by "full name"
order by "total unique products" desc

--Q7. Which product has been bought the least in terms of quantity?
select * from (select products.product_id, product_name, sum(quantity) as "total qauntity sold",
rank() over(order by sum(quantity) asc) as ranko
from products
join order_items on products.product_id=order_items.product_id
group by products.product_id, product_name 
order by "total qauntity sold") as leastq
where leastq.ranko=1

--Q8. What is the median order total?
WITH order_totals AS (
    SELECT 
       ord.order_id, 
       SUM(prod.price * items.quantity) AS total,
	row_number() over (order by SUM(prod.price * items.quantity)) as "total row number"
    FROM orders ord
    JOIN order_items items ON ord.order_id = items.order_id
    JOIN products prod ON items.product_id = prod.product_id 
    GROUP BY ord.order_id)
select avg(total) as "median order total"
from order_totals
where "total row number" in (8,9)
/*Note : After running the CTE first, I found out the number of rows present . 
As the number of rows present were even. I had to find average of middle numbers
present in "total" column. I had used row number function which helped me in understanding
that the middle values have corresponding values of row number 8 and 9. Thus, I used 8 and 9 row number as a filter to calculate the accurate result.

This made query easy and I didn't even have to use any specific function built for such type of operation 
and this way I also avoided use of complex arithmatic operations*/

--Q9. For each order, determine if it was ‘Expensive’ (total over 300), ‘Affordable’ (total over 100), or ‘Cheap’.
select orders.order_id, sum(price*quantity) as "total revenue by order_id", 
(case 
 when sum(price*quantity)>300 then 'Expensive'
 when sum(price*quantity)>100 then 'Affordable'
 else 'cheap'
 end) as "product_cost_category"
from orders
join order_items on order_items.order_id=orders.order_id
join products on products.product_id=order_items.product_id
group by orders.order_id

--10. Find customers who have ordered the product with the highest price.
with ctep as (select concat(customers.first_name ||' '|| customers.last_name) as "full name", product_name, price
from customers
join orders on customers.customer_id=orders.customer_id
join order_items on order_items.order_id=orders.order_id
join products on products.product_id=order_items.product_id)

select * from (select "full name", product_name, price,
rank() over(order by price desc ) as "rank_1"
from ctep) as pprank
where pprank.rank_1=1
