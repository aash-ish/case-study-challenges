# SQL Case Study of a Major Travel Company

## Creating Tables 

CREATE TABLE booking_table(
   Booking_id       VARCHAR(3) NOT NULL 
  ,Booking_date     date NOT NULL
  ,User_id          VARCHAR(2) NOT NULL
  ,Line_of_business VARCHAR(6) NOT NULL
);
INSERT INTO booking_table(Booking_id,Booking_date,User_id,Line_of_business) VALUES ('b1','2022-03-23','u1','Flight');
INSERT INTO booking_table(Booking_id,Booking_date,User_id,Line_of_business) VALUES ('b2','2022-03-27','u2','Flight');
INSERT INTO booking_table(Booking_id,Booking_date,User_id,Line_of_business) VALUES ('b3','2022-03-28','u1','Hotel');
INSERT INTO booking_table(Booking_id,Booking_date,User_id,Line_of_business) VALUES ('b4','2022-03-31','u4','Flight');
INSERT INTO booking_table(Booking_id,Booking_date,User_id,Line_of_business) VALUES ('b5','2022-04-02','u1','Hotel');
INSERT INTO booking_table(Booking_id,Booking_date,User_id,Line_of_business) VALUES ('b6','2022-04-02','u2','Flight');
INSERT INTO booking_table(Booking_id,Booking_date,User_id,Line_of_business) VALUES ('b7','2022-04-06','u5','Flight');
INSERT INTO booking_table(Booking_id,Booking_date,User_id,Line_of_business) VALUES ('b8','2022-04-06','u6','Hotel');
INSERT INTO booking_table(Booking_id,Booking_date,User_id,Line_of_business) VALUES ('b9','2022-04-06','u2','Flight');
INSERT INTO booking_table(Booking_id,Booking_date,User_id,Line_of_business) VALUES ('b10','2022-04-10','u1','Flight');
INSERT INTO booking_table(Booking_id,Booking_date,User_id,Line_of_business) VALUES ('b11','2022-04-12','u4','Flight');
INSERT INTO booking_table(Booking_id,Booking_date,User_id,Line_of_business) VALUES ('b12','2022-04-16','u1','Flight');
INSERT INTO booking_table(Booking_id,Booking_date,User_id,Line_of_business) VALUES ('b13','2022-04-19','u2','Flight');
INSERT INTO booking_table(Booking_id,Booking_date,User_id,Line_of_business) VALUES ('b14','2022-04-20','u5','Hotel');
INSERT INTO booking_table(Booking_id,Booking_date,User_id,Line_of_business) VALUES ('b15','2022-04-22','u6','Flight');
INSERT INTO booking_table(Booking_id,Booking_date,User_id,Line_of_business) VALUES ('b16','2022-04-26','u4','Hotel');
INSERT INTO booking_table(Booking_id,Booking_date,User_id,Line_of_business) VALUES ('b17','2022-04-28','u2','Hotel');
INSERT INTO booking_table(Booking_id,Booking_date,User_id,Line_of_business) VALUES ('b18','2022-04-30','u1','Hotel');
INSERT INTO booking_table(Booking_id,Booking_date,User_id,Line_of_business) VALUES ('b19','2022-05-04','u4','Hotel');
INSERT INTO booking_table(Booking_id,Booking_date,User_id,Line_of_business) VALUES ('b20','2022-05-06','u1','Flight');
;
CREATE TABLE user_table(
   User_id VARCHAR(3) NOT NULL
  ,Segment VARCHAR(2) NOT NULL
);
INSERT INTO user_table(User_id,Segment) VALUES ('u1','s1');
INSERT INTO user_table(User_id,Segment) VALUES ('u2','s1');
INSERT INTO user_table(User_id,Segment) VALUES ('u3','s1');
INSERT INTO user_table(User_id,Segment) VALUES ('u4','s2');
INSERT INTO user_table(User_id,Segment) VALUES ('u5','s2');
INSERT INTO user_table(User_id,Segment) VALUES ('u6','s3');
INSERT INTO user_table(User_id,Segment) VALUES ('u7','s3');
INSERT INTO user_table(User_id,Segment) VALUES ('u8','s3');
INSERT INTO user_table(User_id,Segment) VALUES ('u9','s3');
INSERT INTO user_table(User_id,Segment) VALUES ('u10','s3');

select *
from user_table

select *
from booking_table

##--SQL Case study questions and their solutions are given below

-- Q1. 1. Write an SQL query that gives summary at segment level.
select segment, count(distinct (a.user_id)) as "total number of users",
count(distinct case when Line_of_business = 'Flight' and Booking_date between '2022-04-02' and '2022-04-30' then t.user_id end) as "users who booked flight in april 2022" 
from user_table a
left join booking_table t on a.user_id=t.user_id
group by segment
order by segment asc;
-- no need to mention else as by default its null in case

-- Q2. Write a query to identify users whose first booking was a hotel booking.
select user_id, ranks, line_of_business
from (select *,
rank() over(partition by user_id order by booking_date asc) as ranks
from booking_table) as a 
where line_of_business='Flight' and ranks=1
-- can be done with first value(column values which comes first "insert column") windows function

--Q2. alternate solution
select user_id, first_values, booking_date
from (select *,
first_value(line_of_business) over(partition by user_id order by booking_date asc) as first_values
from booking_table) as a 
where first_values='Hotel'

--Q3. Write a query to calculate the days between first and last booking of each user.
select user_id, 													
(round(extract(epoch from max(booking_date))- extract(epoch from min(booking_date)))/86400) as time_taken
from booking_table
group by user_id
order by time_taken desc
--can use datediff(day, ealier date, latest date) to find data difference in other dbms

--Q4.Write a query to count the number of flights and hotel bookings in each of the users by the year 2022.
select segment, line_of_business,
(case when line_of_business='Flight' then count(line_of_business)
when line_of_business='Hotel' then count(line_of_business) end) as "line of business count" 
from user_table a
inner join booking_table t
on a.user_id=t.user_id
group by segment, line_of_business
order by line_of_business
--while using inner join sequence of table doesn't matter
													  


